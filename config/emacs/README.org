#+TITLE: noaccOS' Emacs Config
#+AUTHOR: noaccOS
#+STARTUP: overview

* Environment
** Font
JetBrains Mono is my favorite monospaced font. I use the nerd font patched version for the extra symbols
#+begin_src elisp
  (add-to-list 'default-frame-alist
               '(font . "JetBrainsMono Nerd Font-13"))
#+end_src
*** Unicode fonts
    Support for unicode characters
    #+begin_src elisp
      (use-package unicode-fonts
        :config
        (unicode-fonts-setup))
    #+end_src
** Theme
I have a nord-themed rice so I want a nord-themed emacs
The official theme is fine but I found it has less compatibility with common extensions vs DOOM Emacs'
#+begin_src elisp
  (use-package doom-catppuccin-theme
    :straight (doom-catppuccin-theme
               :host github
               :repo "doomemacs/themes"
               :fork "mangkoran/themes"
               :branch "doom-catppuccin")
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-catppuccin t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (cl-pushnew (straight--repos-dir)
              custom-theme-load-path)
#+end_src
** Mode line
My favorite modeline is doom's
#+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-icon t
          doom-modeline-unicode-fallback t
          doom-modeline-word-count t
          doom-modeline-indent-info t
          doom-modeline-modal-icon nil)
    :config (column-number-mode)
    :hook (after-init . doom-modeline-mode))
#+end_src
*** Proportional font
For some reason emacs 29 defaults to proportional fonts on the modeline
#+begin_src elisp
  (when (version<= "29" emacs-version)
    (set-face-attribute 'mode-line-active nil :inherit 'mode-line)
    (set-face-attribute 'mode-line-inactive nil :inherit 'mode-line))
#+end_src
** Scrolling options
Make the scrolling feel better
#+begin_src elisp
  (setq mouse-wheel-scroll-amount '(5 ((shift) . 20)) ;; five lines at a time, 20 if holding shift
        mouse-wheel-progressive-speed nil             ;; disable incremental scrolling
        mouse-wheel-follow-mouse 't                   ;; scroll window under mouse
        scroll-step 1)                                ;; keyboard scroll one line at a time
  ;; TODO: Set horizontal scrolling on C-mouse4/5
#+end_src
** Clean interface
Disables all gui elements
#+begin_src elisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
#+end_src
** Delete selection
When there is an active region and something is typed, the default behavior is to just type it when the cursor is
I want the standard behavior of deleting the selection
#+begin_src elisp
  (delete-selection-mode 1)
#+end_src
** Keybindings
I completely changed normal keybindings, it's somewhat similar to cua-mode and it just makes more sense to me
*** Custom functions
#+begin_src elisp
  (global-set-key (kbd "C-x C-n") 'counsel-find-file)
  (global-set-key (kbd "C-x o") nil) ;; unset "C-u o" to use it as a prefix
  (with-eval-after-load "elfeed"
    (global-set-key (kbd "C-x o f") 'elfeed))
  (with-eval-after-load "ivy"
    (recentf-mode 1)
    (global-set-key (kbd "C-x o r") 'counsel-recentf))
#+end_src
*** Control remap
#+begin_src elisp
  (with-eval-after-load "avy"
    (global-set-key (kbd "C-a") 'avy-goto-word-1))
  ;; (global-set-key (kbd "C-b") ')
  (with-eval-after-load "rebinder"
    (define-key rebinder-mode-map (kbd "C-c") 'kill-ring-save))
  ;; (global-set-key (kbd "C-d") ')
  (setq lsp-keymap-prefix "C-e")
  ;; (global-set-key (kbd "C-f") 'kill-ring-save)
  ;; (global-set-key (kbd "C-g") 'keyboard-quit)
  (with-eval-after-load "rebinder"
    (define-key global-map (kbd "C-h") (rebinder-dynamic-binding "C-c")))
  (global-set-key (kbd "C-i") 'universal-argument)
  ;; (global-set-key (kbd "C-j") 'electric-newline-and-maybe-indent)
  ;; (global-set-key (kbd "C-k") 'kill-line)
  ;; (global-set-key (kbd "C-l") 'recenter-top-bottom)
  ;; (global-set-key (kbd "C-m") ')
  ;; (global-set-key (kbd "C-n") ')
  (with-eval-after-load "ace-window"
    (global-set-key (kbd "C-o") 'ace-window))
  (global-set-key (kbd "C-p") 'mark-paragraph)
  ;; (global-set-key (kbd "C-q") 'quoted-insert)
  (global-set-key (kbd "C-r") 'query-replace-regexp)
  (with-eval-after-load "ivy"
    (global-set-key (kbd "C-s") 'swiper))
  (global-set-key (kbd "C-t") 'open-line)
  (with-eval-after-load "rebinder"
    (define-key global-map (kbd "C-u") (rebinder-dynamic-binding "C-x")))
  (global-set-key (kbd "C-v") 'yank)
  (global-set-key (kbd "C-w") 'transpose-words)
  (with-eval-after-load "rebinder"
    (define-key rebinder-mode-map (kbd "C-x") 'kill-region))
  ;; (global-set-key (kbd "C-y") ')
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-?") help-map)
  (global-set-key (kbd "C-<escape>") 'kill-word)
#+end_src
*** Meta remap
#+begin_src elisp
  (with-eval-after-load "avy"
    (global-set-key (kbd "M-a") 'avy-goto-char-2))
  ;; (global-set-key (kbd "M-b") ')
  (global-set-key (kbd "M-c") 'upcase-dwim)
  ;; (global-set-key (kbd "M-d") ')
  ;; (global-set-key (kbd "M-e") ')
  ;; (global-set-key (kbd "M-f") ') ;; TODO: It's a damn prefix
  (global-set-key (kbd "M-g") 'capitalize-dwim)
  (global-set-key (kbd "M-h") 'backward-word)
  ;; (global-set-key (kbd "M-i") ')
  (global-set-key (kbd "M-j") 'back-to-indentation)
  (global-set-key (kbd "M-k") 'kill-sentence)
  (global-set-key (kbd "M-l") 'move-to-window-line-top-bottom)
  ;; (global-set-key (kbd "M-m") ')
  (global-set-key (kbd "M-n") 'backward-sentence)
  ;; (global-set-key (kbd "M-o") ')
  ;; (global-set-key (kbd "M-p") ')
  ;; (global-set-key (kbd "M-q") ')
  (global-set-key (kbd "M-r") 'downcase-dwim)
  (global-set-key (kbd "M-s") 'forward-word)
  (global-set-key (kbd "M-t") 'forward-sentence)
  (with-eval-after-load "ivy"
    (global-set-key (kbd "M-u") 'counsel-M-x))
  (global-set-key (kbd "M-v") 'yank-pop)
  ;; (global-set-key (kbd "M-w") ')
  ;; (global-set-key (kbd "M-x") ')
  ;; (global-set-key (kbd "M-y") ')
  (global-set-key (kbd "M-SPC") 'rectangle-mark-mode)
  (with-eval-after-load "undo-tree"
    (global-set-key (kbd "M-z") 'undo-tree-visualize))
#+end_src
*** Rebinder Hook
#+begin_src elisp
  (with-eval-after-load "rebinder"
    (rebinder-hook-to-mode 't 'after-change-major-mode-hook))
#+end_src
** Auto save
Auto save files in the file itself rather than creating a new file
#+begin_src elisp
  (setq backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist '(("." . "~/.emacs.d/autosaves/"))    ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups
  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs.d/autosaves/" t)))
#+end_src
** Enable emacs functions
Some functions are disabled by default
#+begin_src elisp
 (put 'downcase-region 'disabled nil)
 (put 'upcase-region 'disabled nil)
 (put 'dired-find-alternate-file 'disabled nil)
#+end_src
** Start page
Change *scratch* mode to org
#+begin_src elisp
  (setq initial-major-mode 'org-mode ;; *scratch* defaults to org mode
        inhibit-splash-screen t)     ;; disable splash screen
#+end_src
** Line numbers
#+begin_src elisp
  ;; (global-display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src
** Reload private config
#+begin_src elisp
  (defun reload-private-config ()
    "Reloads emacs' config without the need to restart"
    (interactive)
    (load-file user-init-file))

  (global-set-key (kbd "C-x r p") 'reload-private-config)
#+end_src
** Ligatures
For JetBrains Mono
#+begin_src elisp
  ;; (let ((alist '((?! . "\\(?:!\\(?:==\\|[!=]\\)\\)")
  ;;                (?# . "\\(?:#\\(?:###?\\|_(\\|[!#(:=?[_{]\\)\\)")
  ;;                (?$ . "\\(?:\\$>\\)")
  ;;                (?& . "\\(?:&&&?\\)")
  ;;                (?* . "\\(?:\\*\\(?:\\*\\*\\|[/>]\\)\\)")
  ;;                (?+ . "\\(?:\\+\\(?:\\+\\+\\|[+>]\\)\\)")
  ;;                (?- . "\\(?:-\\(?:-[>-]\\|<<\\|>>\\|[<>|~-]\\)\\)")
  ;;                (?. . "\\(?:\\.\\(?:\\.[.<]\\|[.=?-]\\)\\)")
  ;;                (?/ . "\\(?:/\\(?:\\*\\*\\|//\\|==\\|[*/=>]\\)\\)")
  ;;                (?: . "\\(?::\\(?:::\\|\\?>\\|[:<-?]\\)\\)")
  ;;                (?\; . "\\(?:;;\\)")
  ;;                (?< . "\\(?:<\\(?:!--\\|\\$>\\|\\*>\\|\\+>\\|-[<>|]\\|/>\\|<[<=-]\\|=\\(?:=>\\|[<=>|]\\)\\||\\(?:||::=\\|[>|]\\)\\|~[>~]\\|[$*+/:<=>|~-]\\)\\)")
  ;;                (?= . "\\(?:=\\(?:!=\\|/=\\|:=\\|=[=>]\\|>>\\|[=>]\\)\\)")
  ;;                (?> . "\\(?:>\\(?:=>\\|>[=>-]\\|[]:=-]\\)\\)")
  ;;                (?? . "\\(?:\\?[.:=?]\\)")
  ;;                (?\[ . "\\(?:\\[\\(?:||]\\|[<|]\\)\\)")
  ;;                (?\ . "\\(?:\\\\/?\\)")
  ;;                (?\] . "\\(?:]#\\)")
  ;;                (?^ . "\\(?:\\^=\\)")
  ;;                (?_ . "\\(?:_\\(?:|?_\\)\\)")
  ;;                (?{ . "\\(?:{|\\)")
  ;;                (?| . "\\(?:|\\(?:->\\|=>\\||\\(?:|>\\|[=>-]\\)\\|[]=>|}-]\\)\\)")
  ;;                (?~ . "\\(?:~\\(?:~>\\|[=>@~-]\\)\\)"))))
  ;;   (dolist (char-regexp alist)
  ;;     (set-char-table-range composition-function-table (car char-regexp)
  ;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))
  (use-package ligature
    :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                         "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                         "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                         "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                         "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                         "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                         ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                         "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                         "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                         "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                         "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src
** Native comp warnings
Without this, warnings spawn continuously
#+begin_src elisp
  (setq comp-async-report-warnings-errors nil)
#+end_src
** Direnv
Direnv integration. Useful with nix
#+begin_src elisp
  (use-package direnv
    :config (direnv-mode))
#+end_src
** No tabs
#+begin_src elisp
  (setq-default indent-tabs-mode nil
                tab-width        4)
#+end_src
* Useful extensions
** Rainbow delimiters
Matching parens have same color
   #+begin_src elisp
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src
Extensios that 
** Multiple cursors
Allows spawning multiple cursors
#+begin_src elisp
  (use-package multiple-cursors
    :bind (
      ("C->" . mc/mark-next-like-this)
      ("C-<" . mc/mark-previous-like-this)
    ))
#+end_src
** Avy
Fast place cursor in page

#+begin_src elisp
  (use-package avy)
#+end_src
** Undo-Tree
No more linear undo
#+begin_src elisp
  (use-package undo-tree)
#+end_src
** Completions
*** Ivy
I hate helm ™
#+begin_src elisp
  (use-package counsel                      ; ivy and swiper are installed as dependencies
    :config
    (ivy-mode 1)
    (counsel-mode 1)
    :config
    (define-key counsel-find-file-map (kbd "<tab>") 'ivy-alt-done)               ;; Complete the selection by just pressing tab once
    (define-key counsel-find-file-map (kbd "C-<return>") 'ivy-immediate-done)   ;; Open the file with the given name without complete
    )
#+end_src
**** Ivy-rich
     Adds additional informations to ivy functions
     #+begin_src elisp
       (use-package ivy-rich
         :after ivy
         :config
         (setq ivy-rich-parse-remote-buffer nil)

         (cl-pushnew '(+ivy-rich-buffer-icon)
                     (cadr (plist-get ivy-rich-display-transformers-list
                                      'ivy-switch-buffer))
                     :test #'equal)

         (defun ivy-rich-bookmark-filename-or-empty (candidate)
           (let ((filename (ivy-rich-bookmark-filename candidate)))
             (if (not filename) "" filename)))

        
         (when-let* ((plist (plist-get ivy-rich-display-transformers-list 'ivy-switch-buffer))
                     (switch-buffer-alist (assq 'ivy-rich-candidate (plist-get plist :columns))))
           (setcar switch-buffer-alist '+ivy-rich-buffer-name))

         (ivy-rich-mode +1)
         (ivy-rich-project-root-cache-mode +1))
     #+end_src
**** Icons
     Adds icons to ivy
     #+begin_src elisp
       (use-package all-the-icons-ivy
         :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
     #+end_src
**** Ivy-Avy
     Ivy and avy integration
     #+begin_src elisp
       (use-package ivy-avy)
     #+end_src
*** Which-key
Shows command completions (like when C-x)
#+begin_src elisp
  (use-package which-key
    :init
    (setq echo-keystrokes 0.01) ;; Has too much delay otherwise
    :config
    (which-key-mode)
    (setq which-key-idle-delay           0.01
          which-key-idle-secondary-delay 0.01))
#+end_src
** Project Manager
I try to stick with ~project.el~ without installing projectile
*** Project-X
Extension library for ~project.el~
- ~.project~ file to mark directory as project
- Save project window
  #+begin_src elisp
    (use-package project-x
      :straight (project-x
         :type git
         :host github
         :repo "karthink/project-x")
      :after project
      :config
      (project-x-mode 1))
  #+end_src
** Focus windows
I love ace-window
#+begin_src elisp
  (use-package ace-window
    :config
    (setq aw-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n ?s)))
#+end_src
** Wrap region
Adds delimiters to selection
#+begin_src elisp
  (use-package wrap-region
    :config (wrap-region-mode t))
#+end_src
** Magit
git gui for emacs
#+begin_src elisp
  (use-package magit)
#+end_src
** Treemacs
Simple file explorer, nerdtree like
*** Base package
#+begin_src elisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))
#+end_src
*** Icons dired
#+begin_src elisp
  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :config (treemacs-icons-dired-mode))
#+end_src
*** Magit integration
#+begin_src elisp
  (use-package treemacs-magit
    :after (treemacs magit))
#+end_src
** Popups
*** Disable gui popups
#+begin_src elisp
  (use-package ace-popup-menu
    :config
    (ace-popup-menu-mode 1))
#+end_src
** Diff
#+begin_src elisp
  (use-package diff-hl
    :after (magit dired)
    :hook ((magit-pre-refresh-hook  . diff-hl-magit-pre-refresh )
           (magit-post-refresh-hook . diff-hl-magit-post-refresh))
    :config (global-diff-hl-mode))
#+end_src
** Flycheck
Syntax checker
#+begin_src elisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src
** Terminal
I use vterm since it's a full terminal emulator

#+begin_src elisp
  (use-package vterm)
#+end_src
** Emails
I'm trying to setup mu4e
   
#+begin_src elisp
  ;; (use-package mu4e
  ;;   :config
  ;;   ;; This is a helper to help determine which account context I am in based 
  ;;   ;; on the folder in my maildir the email (eg. ~/.mail/nine27) is located in.
  ;;   (defun mu4e-message-maildir-matches (msg rx)
  ;;     (when rx
  ;;       (if (listp rx)
  ;;           ;; If rx is a list, try each one for a match
  ;;           (or (mu4e-message-maildir-matches msg (car rx))
  ;;               (mu4e-message-maildir-matches msg (cdr rx)))
  ;;         ;; Not a list, check rx
  ;;         (string-match rx (mu4e-message-field msg :maildir)))))

  ;;   ;; Choose account label to feed msmtp -a option based on From header
  ;;   ;; in Message buffer; This function must be added to
  ;;   ;; message-send-mail-hook for on-the-fly change of From address before
  ;;   ;; sending message since message-send-mail-hook is processed right
  ;;   ;; before sending message.
  ;;   (defun choose-msmtp-account ()
  ;;     (if (message-mail-p)
  ;;         (save-excursion
  ;;           (let*
  ;;               ((from (save-restriction
  ;;                        (message-narrow-to-headers)
  ;;                        (message-fetch-field "from")))
  ;;                (account
  ;;                 (cond
  ;;                  ((string-match "noacco.francesco@zohomail.eu" from) "zoho")
  ;;                  ((string-match "149624@spes.uniud.it" from) "uniud"))))
  ;;             (setq message-sendmail-extra-arguments (list '"-a" account))))))

  ;;   (setq mail-user-agent 'mu4e-user-agent)
  ;;   (setq mu4e-mu-binary "/bin/mu")
  ;;   (setq mu4e-maildir "~/.mail/")
  ;;   (setq mu4e-get-mail-command "mbsync -a")
  ;;   ;; I'll try to setup the automatic imap notification
  ;;   ;;(setq mu4e-update-interval 300)
  ;;   (setq mu4e-view-show-images t)
  ;;   (setq mu4e-html2text-command "w3m -dump -T text/html")
  ;;   (setq mu4e-use-fancy-chars t)
  ;;   ;; This enabled the thread like viewing of email similar to gmail's UI.
  ;;   (setq mu4e-headers-include-related t)
  ;;   (setq mu4e-attachment-dir  "~/Downloads")
  ;;   ;; This prevents saving the email to the Sent folder since gmail will do this for us on their end.
  ;;   (setq mu4e-sent-messages-behavior 'delete)
  ;;   (setq message-kill-buffer-on-exit t)
  ;;   ;; Enable inline images.
  ;;   (setq mu4e-view-show-images t)
  ;;   ;; Use imagemagick, if available.
  ;;   (when (fboundp 'imagemagick-register-types)
  ;;     (imagemagick-register-types))

  ;;   ;; Sometimes html email is just not readable in a text based client, this lets me open the
  ;;   ;; email in my browser.
  ;;   (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser) t)

  ;;   ;; Spell checking ftw.
  ;;   (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  ;;   ;; This hook correctly modifies the \Inbox and \Starred flags on email when they are marked.
  ;;   ;; Without it refiling (archiving) and flagging (starring) email won't properly result in
  ;;   ;; the corresponding gmail action.
  ;;   (add-hook 'mu4e-mark-execute-pre-hook
  ;;             (lambda (mark msg)
  ;;               (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox"))
  ;;                     ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
  ;;                     ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))

  ;;   ;; This sets up my two different context for my personal and work emails.
  ;;   (setq mu4e-contexts
  ;;         `( ,(make-mu4e-context
  ;;              :name "zoho"
  ;;              :enter-func (lambda () (mu4e-message "Switch to the zoho context"))
  ;;              :match-func (lambda (msg)
  ;;                            (when msg
  ;;                              (mu4e-message-maildir-matches msg "^/zoho")))
  ;;              :leave-func (lambda () (mu4e-clear-caches))
  ;;              :vars '((user-mail-address     . "noacco.francesco@zohomail.eu")
  ;;                      (user-full-name        . "Noacco Francesco")
  ;;                      (mu4e-sent-folder      . "/zoho/Sent")
  ;;                      (mu4e-drafts-folder    . "/zoho/Drafts")
  ;;                      (mu4e-trash-folder     . "/zoho/Trash")
  ;;                      (mu4e-refile-folder    . "/zoho/INBOX")))
  ;;            ,(make-mu4e-context
  ;;              :name "uniud"
  ;;              :enter-func (lambda () (mu4e-message "Switch to the uniud context"))
  ;;              :match-func (lambda (msg)
  ;;                            (when msg
  ;;                              (mu4e-message-maildir-matches msg "^/uniud")))
  ;;              :leave-func (lambda () (mu4e-clear-caches))
  ;;              :vars '((user-mail-address     . "149624@spes.uniud.it")
  ;;                      (user-full-name        . "Noacco Francesco")
  ;;                      (mu4e-sent-folder      . "/uniud/Sent Items")
  ;;                      (mu4e-drafts-folder    . "/uniud/Drafts")
  ;;                      (mu4e-trash-folder     . "/uniud/Deleted Items")
  ;;                      (mu4e-refile-folder    . "/uniud/INBOX")))))

  ;;   ;; Configure sending mail.
  ;;   (setq message-send-mail-function 'message-send-mail-with-sendmail
  ;;         sendmail-program "/bin/msmtp"
  ;;         user-full-name "Noacco Francesco")

  ;;   ;; Use the correct account context when sending mail based on the from header.
  ;;   (setq message-sendmail-envelope-from 'header)
  ;;   (add-hook 'message-send-mail-hook 'choose-msmtp-account)

  ;;   ;; Bookmarks for common searches that I use.
  ;;   (setq mu4e-bookmarks '(("\\\\Inbox" "Inbox" ?i)
  ;;                          ("flag:unread" "Unread messages" ?u)
  ;;                          ("date:today..now" "Today's messages" ?t)
  ;;                          ("date:7d..now" "Last 7 days" ?w)
  ;;                          ("mime:image/*" "Messages with images" ?p)))) 
#+end_src
** RSS
*** Elfeed
The reader itself
#+begin_src elisp
  (use-package elfeed
    :config
    (setq elfeed-feeds
          '(("https://www.phoronix.com/rss.php" linux)
            ("https://www.gamingonlinux.com/article_rss.php" linux gaming))))
#+end_src
*** Elfeed Dashboard
Gives it an iterface similar to mu4e
#+begin_src elisp
  (use-package elfeed-dashboard
    :straight (elfeed-dashboard
               :type git
               :host github
               :repo "Manoj321/elfeed-dashboard"))
#+end_src
** Tree sitter
Incremental parsing of code
#+begin_src elisp
  (use-package tree-sitter
    :config (require 'tree-sitter)
    (global-tree-sitter-mode 1)
    :hook (tree-sitter-after-on-hook . tree-sitter-hl-mode))

 (use-package tree-sitter-langs
   :config (require 'tree-sitter-langs))

 (use-package tree-sitter-indent
   :hook (rust-mode-hook . tree-sitter-indent-mode))
   #+end_src
* Extensions modules
** Org
All the org stuff goes here, from org default initialization to org bullet
*** Org Tempo
Useful snippets
#+begin_src elisp
  (require 'org-tempo)
#+end_src
*** Settings
Settings for org mode
#+begin_src elisp
  (org-indent-mode 1)
  (setq org-ellipsis             " ⤵"
	org-M-RET-may-split-line nil)
#+end_src
*** Minted
Export for latex source blocks
#+begin_src elisp
  ;; Use minted
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
  (setq org-latex-src-block-backend 'minted)

  ;; Add the shell-escape flag
  (setq org-latex-pdf-process '(
                                "pdflatex -shell-escape -interaction=nonstopmode -output-directory=%o %f"
                                "bibtex %b"
                                "pdflatex -shell-escape -interaction=nonstopmode -output-directory=%o %f"
                                "pdflatex -shell-escape -interaction=nonstopmode -output-directory=%o %f"
                                ))

  ;; Sample minted options.
  (setq org-latex-minted-options '(
                                   ("frame" "lines")
                                   ("fontsize" "\\scriptsize")
                                   ("xleftmargin" "\\parindent")
                                   ("linenos" "")
                                   ))

  (setq org-latex-minted-langs '(
                                 (emacs-lisp "common-lisp")
                                 (web "aspx-cs")
                                 ))
#+end_src
*** UniUd Thesis
Snippets for uniud thesis, using ~thud~ package
#+begin_src elisp
      (require 'ox-latex)
      (add-to-list 'org-latex-classes
                   '("thud" "\\def\\thudbabelopt{english,italian}\n\\documentclass[target=bach]{thud}"
                     ("\\chapter{%s}" . "\\chapter*{%s}")
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
  ))
#+end_src
** Company
*** Base package
#+begin_src elisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key company-active-map (kbd "<return>") nil)
    (define-key company-active-map (kbd "<tab>") nil)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "SPC") nil)
    (define-key company-active-map (kbd "C-SPC") #'company-complete-selection)
    (define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
    (setq company-idle-delay 0
          company-minimum-prefix-length 1))
#+end_src
*** Bullets
Cute bullets
#+begin_src elisp
        (use-package org-superstar
          :config
          (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
          (setq org-superstar-headline-bullets-list
                '("\U0001F7C0" "\U0001F7C1" "\U0001F7C2" "\U0001F7C3" "\U0001F7C4" "\U0001F7C5" "\U0001F7C6" "\U0001F7C7" "\U0001F7C8")))
#+end_src
** LSP
Packages
#+begin_src elisp
  (use-package lsp-mode
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :init
    :commands lsp)
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package company-lsp :commands company-lsp)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src
*** LSP-Origami
Folding and unfolding blocks of code
#+begin_src elisp
  (use-package lsp-origami
    :hook (lsp-after-open-hook . lsp-origami-try-enable))
#+end_src
** Dired
*** Rsync
Allow to use rsync to copy files, without blocking emacs
#+begin_src elisp
  (use-package dired-rsync
    :config
    (bind-key "C-c C-r" 'dired-rsync dired-mode-map))
#+end_src
*** More colors
#+begin_src elisp
  (use-package diredfl
    :config (diredfl-global-mode))
#+end_src
*** Icons
#+begin_src elisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
** DAP
Debugger
*** Base package
#+begin_src elisp
  (use-package dap-mode
    :config
    (setq dap-auto-configure-mode t))
#+end_src
* Random stuff
** Discord Rich Presence
#+begin_src elisp
  (use-package elcord
    :config 
     (when (string= (getenv "ELCORD") "y")
       (elcord-mode)))
#+end_src
** Key rebinding
Used to rebind C-c and C-x
#+begin_src elisp
  (use-package rebinder
    :straight (rebinder
               :type git
               :host github
               :repo "darkstego/rebinder.el"))
#+end_src
* Languages
** Python
*** LSP
I use pyright lsp for python
#+begin_src elisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))  ; or lsp-deferred
#+end_src
*** DAP
#+begin_src elisp
  (add-hook 'python-mode-hook '(lambda () (require 'dap-python)))
#+end_src
** Haskell
*** Haskell-mode
#+begin_src elisp
  (use-package haskell-mode)
#+end_src
*** LSP
#+begin_src elisp
  (use-package lsp-haskell
    :hook ((haskell-mode-hook . lsp)
           (haskell-literate-mode-hook . lsp)))
#+end_src
*** Indent
Hindent is used to indent haskell code
#+begin_src elisp
  (use-package hindent
    :hook (haskell-mode-hook . hindent-mode))
#+end_src
** C-C++
I try using ccls because lsp-clangd seems abandonware :(
#+begin_src elisp
            (use-package ccls
              :hook ((c-mode c++-mode objc-mode cuda-mode) .
                     (lambda () (require 'ccls) (lsp))))
#+end_src
*** DAP
    #+begin_src elisp
      (defun add-hook-to-modes (modes hook)
        (when (> (length modes) 0)
          (progn
            (add-hook (car modes) hook)
            (add-hook-to-modes (cdr modes) hook)
                      )))


      (with-eval-after-load 'dap-mode
        (let ((modes (list 'c-mode 'c++-mode 'objc-mode 'cuda-mode)))
          (add-hook-to-modes modes '(lambda () (require 'dap-lldb)))
          ))
    #+end_src
** Rust
#+begin_src elisp
  (use-package rustic
    :config
    (setq rustic-format-on-save t))
#+end_src
** C#
#+begin_src elisp
  (use-package csharp-mode
    :after tree-sitter
    :config
    (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
#+end_src
** Java
*** LSP
#+begin_src elisp
  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))
#+end_src
*** DAP
#+begin_src elisp
  ;; (use-package dap-java)
#+end_src
** Fish shell
That's my shell, so I need scripts in its lang
#+begin_src elisp
  (use-package fish-mode)
#+end_src
** LUA
#+begin_src elisp
  (use-package lua-mode)
#+end_src
** LaTeX
*** Language Server
#+begin_src elisp
  (use-package lsp-latex
    :hook ((tex-mode yatex bibitex) .
           (lambda () (require 'lsp-latex) (lsp))))
#+end_src
*** Bibtex
#+begin_src elisp
  (use-package ivy-bibtex)
  (use-package org-ref
    :after ivy-bibtex
    :init
    (require 'org-ref)
    (require 'org-ref-ivy)
    :config
    ;; thesis stuff
    (setq bibtex-completion-bibliography '("~/uniud/Tesi/Tesi.bib")
          bibtex-completion-library-path '("~/uniud/Tesi/refs")))
#+end_src

** Nix
For nix config files
#+begin_src elisp
  (use-package nix-mode
      :ensure t
      :init
      (add-to-list 'interpreter-mode-alist '("nix-shell" . nix-shebang-mode))
      (add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))
      :config
      ;; Override nix-shell defined in nix-mode with this definition from nix-sandbox.
      ;; https://github.com/travisbhartwell/nix-emacs/issues/48
      (defun nix-shell (sandbox &rest command)
        "Run a COMMAND in the given SANDBOX and return the output."
        (shell-command-to-string (apply 'nix-shell-string sandbox command))))
#+end_src
*** Options
**** Normal
Make config easier
#+begin_src elisp
  (use-package nixos-options)
#+end_src
**** Company
#+begin_src elisp
  (use-package company-nixos-options
    :config (add-to-list 'company-backends 'company-nixos-options))
#+end_src
   

